# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _transformwrap
else:
    import _transformwrap

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _transformwrap.delete_SwigPyIterator

    def value(self):
        return _transformwrap.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _transformwrap.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _transformwrap.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _transformwrap.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _transformwrap.SwigPyIterator_equal(self, x)

    def copy(self):
        return _transformwrap.SwigPyIterator_copy(self)

    def next(self):
        return _transformwrap.SwigPyIterator_next(self)

    def __next__(self):
        return _transformwrap.SwigPyIterator___next__(self)

    def previous(self):
        return _transformwrap.SwigPyIterator_previous(self)

    def advance(self, n):
        return _transformwrap.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _transformwrap.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _transformwrap.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _transformwrap.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _transformwrap.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _transformwrap.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _transformwrap.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _transformwrap:
_transformwrap.SwigPyIterator_swigregister(SwigPyIterator)

class IntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _transformwrap.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _transformwrap.IntVector___nonzero__(self)

    def __bool__(self):
        return _transformwrap.IntVector___bool__(self)

    def __len__(self):
        return _transformwrap.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _transformwrap.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _transformwrap.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _transformwrap.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _transformwrap.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _transformwrap.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _transformwrap.IntVector___setitem__(self, *args)

    def pop(self):
        return _transformwrap.IntVector_pop(self)

    def append(self, x):
        return _transformwrap.IntVector_append(self, x)

    def empty(self):
        return _transformwrap.IntVector_empty(self)

    def size(self):
        return _transformwrap.IntVector_size(self)

    def swap(self, v):
        return _transformwrap.IntVector_swap(self, v)

    def begin(self):
        return _transformwrap.IntVector_begin(self)

    def end(self):
        return _transformwrap.IntVector_end(self)

    def rbegin(self):
        return _transformwrap.IntVector_rbegin(self)

    def rend(self):
        return _transformwrap.IntVector_rend(self)

    def clear(self):
        return _transformwrap.IntVector_clear(self)

    def get_allocator(self):
        return _transformwrap.IntVector_get_allocator(self)

    def pop_back(self):
        return _transformwrap.IntVector_pop_back(self)

    def erase(self, *args):
        return _transformwrap.IntVector_erase(self, *args)

    def __init__(self, *args):
        _transformwrap.IntVector_swiginit(self, _transformwrap.new_IntVector(*args))

    def push_back(self, x):
        return _transformwrap.IntVector_push_back(self, x)

    def front(self):
        return _transformwrap.IntVector_front(self)

    def back(self):
        return _transformwrap.IntVector_back(self)

    def assign(self, n, x):
        return _transformwrap.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _transformwrap.IntVector_resize(self, *args)

    def insert(self, *args):
        return _transformwrap.IntVector_insert(self, *args)

    def reserve(self, n):
        return _transformwrap.IntVector_reserve(self, n)

    def capacity(self):
        return _transformwrap.IntVector_capacity(self)
    __swig_destroy__ = _transformwrap.delete_IntVector

# Register IntVector in _transformwrap:
_transformwrap.IntVector_swigregister(IntVector)

class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _transformwrap.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _transformwrap.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _transformwrap.DoubleVector___bool__(self)

    def __len__(self):
        return _transformwrap.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _transformwrap.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _transformwrap.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _transformwrap.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _transformwrap.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _transformwrap.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _transformwrap.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _transformwrap.DoubleVector_pop(self)

    def append(self, x):
        return _transformwrap.DoubleVector_append(self, x)

    def empty(self):
        return _transformwrap.DoubleVector_empty(self)

    def size(self):
        return _transformwrap.DoubleVector_size(self)

    def swap(self, v):
        return _transformwrap.DoubleVector_swap(self, v)

    def begin(self):
        return _transformwrap.DoubleVector_begin(self)

    def end(self):
        return _transformwrap.DoubleVector_end(self)

    def rbegin(self):
        return _transformwrap.DoubleVector_rbegin(self)

    def rend(self):
        return _transformwrap.DoubleVector_rend(self)

    def clear(self):
        return _transformwrap.DoubleVector_clear(self)

    def get_allocator(self):
        return _transformwrap.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _transformwrap.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _transformwrap.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _transformwrap.DoubleVector_swiginit(self, _transformwrap.new_DoubleVector(*args))

    def push_back(self, x):
        return _transformwrap.DoubleVector_push_back(self, x)

    def front(self):
        return _transformwrap.DoubleVector_front(self)

    def back(self):
        return _transformwrap.DoubleVector_back(self)

    def assign(self, n, x):
        return _transformwrap.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _transformwrap.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _transformwrap.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _transformwrap.DoubleVector_reserve(self, n)

    def capacity(self):
        return _transformwrap.DoubleVector_capacity(self)
    __swig_destroy__ = _transformwrap.delete_DoubleVector

# Register DoubleVector in _transformwrap:
_transformwrap.DoubleVector_swigregister(DoubleVector)

class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _transformwrap.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _transformwrap.StringVector___nonzero__(self)

    def __bool__(self):
        return _transformwrap.StringVector___bool__(self)

    def __len__(self):
        return _transformwrap.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _transformwrap.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _transformwrap.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _transformwrap.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _transformwrap.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _transformwrap.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _transformwrap.StringVector___setitem__(self, *args)

    def pop(self):
        return _transformwrap.StringVector_pop(self)

    def append(self, x):
        return _transformwrap.StringVector_append(self, x)

    def empty(self):
        return _transformwrap.StringVector_empty(self)

    def size(self):
        return _transformwrap.StringVector_size(self)

    def swap(self, v):
        return _transformwrap.StringVector_swap(self, v)

    def begin(self):
        return _transformwrap.StringVector_begin(self)

    def end(self):
        return _transformwrap.StringVector_end(self)

    def rbegin(self):
        return _transformwrap.StringVector_rbegin(self)

    def rend(self):
        return _transformwrap.StringVector_rend(self)

    def clear(self):
        return _transformwrap.StringVector_clear(self)

    def get_allocator(self):
        return _transformwrap.StringVector_get_allocator(self)

    def pop_back(self):
        return _transformwrap.StringVector_pop_back(self)

    def erase(self, *args):
        return _transformwrap.StringVector_erase(self, *args)

    def __init__(self, *args):
        _transformwrap.StringVector_swiginit(self, _transformwrap.new_StringVector(*args))

    def push_back(self, x):
        return _transformwrap.StringVector_push_back(self, x)

    def front(self):
        return _transformwrap.StringVector_front(self)

    def back(self):
        return _transformwrap.StringVector_back(self)

    def assign(self, n, x):
        return _transformwrap.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _transformwrap.StringVector_resize(self, *args)

    def insert(self, *args):
        return _transformwrap.StringVector_insert(self, *args)

    def reserve(self, n):
        return _transformwrap.StringVector_reserve(self, n)

    def capacity(self):
        return _transformwrap.StringVector_capacity(self)
    __swig_destroy__ = _transformwrap.delete_StringVector

# Register StringVector in _transformwrap:
_transformwrap.StringVector_swigregister(StringVector)

class ConstCharVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _transformwrap.ConstCharVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _transformwrap.ConstCharVector___nonzero__(self)

    def __bool__(self):
        return _transformwrap.ConstCharVector___bool__(self)

    def __len__(self):
        return _transformwrap.ConstCharVector___len__(self)

    def __getslice__(self, i, j):
        return _transformwrap.ConstCharVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _transformwrap.ConstCharVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _transformwrap.ConstCharVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _transformwrap.ConstCharVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _transformwrap.ConstCharVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _transformwrap.ConstCharVector___setitem__(self, *args)

    def pop(self):
        return _transformwrap.ConstCharVector_pop(self)

    def append(self, x):
        return _transformwrap.ConstCharVector_append(self, x)

    def empty(self):
        return _transformwrap.ConstCharVector_empty(self)

    def size(self):
        return _transformwrap.ConstCharVector_size(self)

    def swap(self, v):
        return _transformwrap.ConstCharVector_swap(self, v)

    def begin(self):
        return _transformwrap.ConstCharVector_begin(self)

    def end(self):
        return _transformwrap.ConstCharVector_end(self)

    def rbegin(self):
        return _transformwrap.ConstCharVector_rbegin(self)

    def rend(self):
        return _transformwrap.ConstCharVector_rend(self)

    def clear(self):
        return _transformwrap.ConstCharVector_clear(self)

    def get_allocator(self):
        return _transformwrap.ConstCharVector_get_allocator(self)

    def pop_back(self):
        return _transformwrap.ConstCharVector_pop_back(self)

    def erase(self, *args):
        return _transformwrap.ConstCharVector_erase(self, *args)

    def __init__(self, *args):
        _transformwrap.ConstCharVector_swiginit(self, _transformwrap.new_ConstCharVector(*args))

    def push_back(self, x):
        return _transformwrap.ConstCharVector_push_back(self, x)

    def front(self):
        return _transformwrap.ConstCharVector_front(self)

    def back(self):
        return _transformwrap.ConstCharVector_back(self)

    def assign(self, n, x):
        return _transformwrap.ConstCharVector_assign(self, n, x)

    def resize(self, *args):
        return _transformwrap.ConstCharVector_resize(self, *args)

    def insert(self, *args):
        return _transformwrap.ConstCharVector_insert(self, *args)

    def reserve(self, n):
        return _transformwrap.ConstCharVector_reserve(self, n)

    def capacity(self):
        return _transformwrap.ConstCharVector_capacity(self)
    __swig_destroy__ = _transformwrap.delete_ConstCharVector

# Register ConstCharVector in _transformwrap:
_transformwrap.ConstCharVector_swigregister(ConstCharVector)

class IntList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _transformwrap.IntList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _transformwrap.IntList___nonzero__(self)

    def __bool__(self):
        return _transformwrap.IntList___bool__(self)

    def __len__(self):
        return _transformwrap.IntList___len__(self)

    def __getslice__(self, i, j):
        return _transformwrap.IntList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _transformwrap.IntList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _transformwrap.IntList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _transformwrap.IntList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _transformwrap.IntList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _transformwrap.IntList___setitem__(self, *args)

    def pop(self):
        return _transformwrap.IntList_pop(self)

    def append(self, x):
        return _transformwrap.IntList_append(self, x)

    def empty(self):
        return _transformwrap.IntList_empty(self)

    def size(self):
        return _transformwrap.IntList_size(self)

    def swap(self, v):
        return _transformwrap.IntList_swap(self, v)

    def begin(self):
        return _transformwrap.IntList_begin(self)

    def end(self):
        return _transformwrap.IntList_end(self)

    def rbegin(self):
        return _transformwrap.IntList_rbegin(self)

    def rend(self):
        return _transformwrap.IntList_rend(self)

    def clear(self):
        return _transformwrap.IntList_clear(self)

    def get_allocator(self):
        return _transformwrap.IntList_get_allocator(self)

    def pop_back(self):
        return _transformwrap.IntList_pop_back(self)

    def erase(self, *args):
        return _transformwrap.IntList_erase(self, *args)

    def __init__(self, *args):
        _transformwrap.IntList_swiginit(self, _transformwrap.new_IntList(*args))

    def push_back(self, x):
        return _transformwrap.IntList_push_back(self, x)

    def front(self):
        return _transformwrap.IntList_front(self)

    def back(self):
        return _transformwrap.IntList_back(self)

    def assign(self, n, x):
        return _transformwrap.IntList_assign(self, n, x)

    def resize(self, *args):
        return _transformwrap.IntList_resize(self, *args)

    def insert(self, *args):
        return _transformwrap.IntList_insert(self, *args)

    def pop_front(self):
        return _transformwrap.IntList_pop_front(self)

    def push_front(self, x):
        return _transformwrap.IntList_push_front(self, x)

    def reverse(self):
        return _transformwrap.IntList_reverse(self)
    __swig_destroy__ = _transformwrap.delete_IntList

# Register IntList in _transformwrap:
_transformwrap.IntList_swigregister(IntList)

class DoubleList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _transformwrap.DoubleList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _transformwrap.DoubleList___nonzero__(self)

    def __bool__(self):
        return _transformwrap.DoubleList___bool__(self)

    def __len__(self):
        return _transformwrap.DoubleList___len__(self)

    def __getslice__(self, i, j):
        return _transformwrap.DoubleList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _transformwrap.DoubleList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _transformwrap.DoubleList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _transformwrap.DoubleList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _transformwrap.DoubleList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _transformwrap.DoubleList___setitem__(self, *args)

    def pop(self):
        return _transformwrap.DoubleList_pop(self)

    def append(self, x):
        return _transformwrap.DoubleList_append(self, x)

    def empty(self):
        return _transformwrap.DoubleList_empty(self)

    def size(self):
        return _transformwrap.DoubleList_size(self)

    def swap(self, v):
        return _transformwrap.DoubleList_swap(self, v)

    def begin(self):
        return _transformwrap.DoubleList_begin(self)

    def end(self):
        return _transformwrap.DoubleList_end(self)

    def rbegin(self):
        return _transformwrap.DoubleList_rbegin(self)

    def rend(self):
        return _transformwrap.DoubleList_rend(self)

    def clear(self):
        return _transformwrap.DoubleList_clear(self)

    def get_allocator(self):
        return _transformwrap.DoubleList_get_allocator(self)

    def pop_back(self):
        return _transformwrap.DoubleList_pop_back(self)

    def erase(self, *args):
        return _transformwrap.DoubleList_erase(self, *args)

    def __init__(self, *args):
        _transformwrap.DoubleList_swiginit(self, _transformwrap.new_DoubleList(*args))

    def push_back(self, x):
        return _transformwrap.DoubleList_push_back(self, x)

    def front(self):
        return _transformwrap.DoubleList_front(self)

    def back(self):
        return _transformwrap.DoubleList_back(self)

    def assign(self, n, x):
        return _transformwrap.DoubleList_assign(self, n, x)

    def resize(self, *args):
        return _transformwrap.DoubleList_resize(self, *args)

    def insert(self, *args):
        return _transformwrap.DoubleList_insert(self, *args)

    def pop_front(self):
        return _transformwrap.DoubleList_pop_front(self)

    def push_front(self, x):
        return _transformwrap.DoubleList_push_front(self, x)

    def reverse(self):
        return _transformwrap.DoubleList_reverse(self)
    __swig_destroy__ = _transformwrap.delete_DoubleList

# Register DoubleList in _transformwrap:
_transformwrap.DoubleList_swigregister(DoubleList)

class StringList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _transformwrap.StringList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _transformwrap.StringList___nonzero__(self)

    def __bool__(self):
        return _transformwrap.StringList___bool__(self)

    def __len__(self):
        return _transformwrap.StringList___len__(self)

    def __getslice__(self, i, j):
        return _transformwrap.StringList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _transformwrap.StringList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _transformwrap.StringList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _transformwrap.StringList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _transformwrap.StringList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _transformwrap.StringList___setitem__(self, *args)

    def pop(self):
        return _transformwrap.StringList_pop(self)

    def append(self, x):
        return _transformwrap.StringList_append(self, x)

    def empty(self):
        return _transformwrap.StringList_empty(self)

    def size(self):
        return _transformwrap.StringList_size(self)

    def swap(self, v):
        return _transformwrap.StringList_swap(self, v)

    def begin(self):
        return _transformwrap.StringList_begin(self)

    def end(self):
        return _transformwrap.StringList_end(self)

    def rbegin(self):
        return _transformwrap.StringList_rbegin(self)

    def rend(self):
        return _transformwrap.StringList_rend(self)

    def clear(self):
        return _transformwrap.StringList_clear(self)

    def get_allocator(self):
        return _transformwrap.StringList_get_allocator(self)

    def pop_back(self):
        return _transformwrap.StringList_pop_back(self)

    def erase(self, *args):
        return _transformwrap.StringList_erase(self, *args)

    def __init__(self, *args):
        _transformwrap.StringList_swiginit(self, _transformwrap.new_StringList(*args))

    def push_back(self, x):
        return _transformwrap.StringList_push_back(self, x)

    def front(self):
        return _transformwrap.StringList_front(self)

    def back(self):
        return _transformwrap.StringList_back(self)

    def assign(self, n, x):
        return _transformwrap.StringList_assign(self, n, x)

    def resize(self, *args):
        return _transformwrap.StringList_resize(self, *args)

    def insert(self, *args):
        return _transformwrap.StringList_insert(self, *args)

    def pop_front(self):
        return _transformwrap.StringList_pop_front(self)

    def push_front(self, x):
        return _transformwrap.StringList_push_front(self, x)

    def reverse(self):
        return _transformwrap.StringList_reverse(self)
    __swig_destroy__ = _transformwrap.delete_StringList

# Register StringList in _transformwrap:
_transformwrap.StringList_swigregister(StringList)

class ConstCharList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _transformwrap.ConstCharList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _transformwrap.ConstCharList___nonzero__(self)

    def __bool__(self):
        return _transformwrap.ConstCharList___bool__(self)

    def __len__(self):
        return _transformwrap.ConstCharList___len__(self)

    def __getslice__(self, i, j):
        return _transformwrap.ConstCharList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _transformwrap.ConstCharList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _transformwrap.ConstCharList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _transformwrap.ConstCharList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _transformwrap.ConstCharList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _transformwrap.ConstCharList___setitem__(self, *args)

    def pop(self):
        return _transformwrap.ConstCharList_pop(self)

    def append(self, x):
        return _transformwrap.ConstCharList_append(self, x)

    def empty(self):
        return _transformwrap.ConstCharList_empty(self)

    def size(self):
        return _transformwrap.ConstCharList_size(self)

    def swap(self, v):
        return _transformwrap.ConstCharList_swap(self, v)

    def begin(self):
        return _transformwrap.ConstCharList_begin(self)

    def end(self):
        return _transformwrap.ConstCharList_end(self)

    def rbegin(self):
        return _transformwrap.ConstCharList_rbegin(self)

    def rend(self):
        return _transformwrap.ConstCharList_rend(self)

    def clear(self):
        return _transformwrap.ConstCharList_clear(self)

    def get_allocator(self):
        return _transformwrap.ConstCharList_get_allocator(self)

    def pop_back(self):
        return _transformwrap.ConstCharList_pop_back(self)

    def erase(self, *args):
        return _transformwrap.ConstCharList_erase(self, *args)

    def __init__(self, *args):
        _transformwrap.ConstCharList_swiginit(self, _transformwrap.new_ConstCharList(*args))

    def push_back(self, x):
        return _transformwrap.ConstCharList_push_back(self, x)

    def front(self):
        return _transformwrap.ConstCharList_front(self)

    def back(self):
        return _transformwrap.ConstCharList_back(self)

    def assign(self, n, x):
        return _transformwrap.ConstCharList_assign(self, n, x)

    def resize(self, *args):
        return _transformwrap.ConstCharList_resize(self, *args)

    def insert(self, *args):
        return _transformwrap.ConstCharList_insert(self, *args)

    def pop_front(self):
        return _transformwrap.ConstCharList_pop_front(self)

    def push_front(self, x):
        return _transformwrap.ConstCharList_push_front(self, x)

    def remove(self, x):
        return _transformwrap.ConstCharList_remove(self, x)

    def unique(self):
        return _transformwrap.ConstCharList_unique(self)

    def reverse(self):
        return _transformwrap.ConstCharList_reverse(self)

    def sort(self):
        return _transformwrap.ConstCharList_sort(self)

    def merge(self, x):
        return _transformwrap.ConstCharList_merge(self, x)
    __swig_destroy__ = _transformwrap.delete_ConstCharList

# Register ConstCharList in _transformwrap:
_transformwrap.ConstCharList_swigregister(ConstCharList)

class cdummytstrategy(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _transformwrap.cdummytstrategy_swiginit(self, _transformwrap.new_cdummytstrategy())
    __swig_destroy__ = _transformwrap.delete_cdummytstrategy

    def create(self, name, node_uid, children_uids, children_names, params):
        return _transformwrap.cdummytstrategy_create(self, name, node_uid, children_uids, children_names, params)

    def configure(self):
        return _transformwrap.cdummytstrategy_configure(self)

    def handleRequest(self, node_uid, msg):
        return _transformwrap.cdummytstrategy_handleRequest(self, node_uid, msg)

    def handleResponse(self, node_uid, msg):
        return _transformwrap.cdummytstrategy_handleResponse(self, node_uid, msg)

    def updateRequest(self, node_uid, msg):
        return _transformwrap.cdummytstrategy_updateRequest(self, node_uid, msg)

    def updateResponse(self, node_uid, msg):
        return _transformwrap.cdummytstrategy_updateResponse(self, node_uid, msg)

    def apply(self, node_uid, timeout=0):
        return _transformwrap.cdummytstrategy_apply(self, node_uid, timeout)

    def getCallbackNames(self):
        return _transformwrap.cdummytstrategy_getCallbackNames(self)

    def destroy(self, node_uid):
        return _transformwrap.cdummytstrategy_destroy(self, node_uid)

    def set_sendRequestCallback(self, callback):
        return _transformwrap.cdummytstrategy_set_sendRequestCallback(self, callback)

    def set_sendResponseCallback(self, callback):
        return _transformwrap.cdummytstrategy_set_sendResponseCallback(self, callback)

    def set_updateDataValueCallback(self, callback):
        return _transformwrap.cdummytstrategy_set_updateDataValueCallback(self, callback)

    def set_registerObserverCallback(self, callback):
        return _transformwrap.cdummytstrategy_set_registerObserverCallback(self, callback)

    def set_sendObserverCallback(self, callback):
        return _transformwrap.cdummytstrategy_set_sendObserverCallback(self, callback)

    def getStatus(self, node_uid, timeout=0):
        return _transformwrap.cdummytstrategy_getStatus(self, node_uid, timeout)

    def getError(self, node_uid, timeout=0):
        return _transformwrap.cdummytstrategy_getError(self, node_uid, timeout)

    def indent(self):
        return _transformwrap.cdummytstrategy_indent(self)

    def dedent(self):
        return _transformwrap.cdummytstrategy_dedent(self)

    def writeln(self, s):
        return _transformwrap.cdummytstrategy_writeln(self, s)

    def dump(self, _indent):
        return _transformwrap.cdummytstrategy_dump(self, _indent)

# Register cdummytstrategy in _transformwrap:
_transformwrap.cdummytstrategy_swigregister(cdummytstrategy)



